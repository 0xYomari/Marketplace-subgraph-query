// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ItemAdded extends ethereum.Event {
  get params(): ItemAdded__Params {
    return new ItemAdded__Params(this);
  }
}

export class ItemAdded__Params {
  _event: ItemAdded;

  constructor(event: ItemAdded) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get itemName(): string {
    return this._event.parameters[1].value.toString();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get listed(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class ItemSoldTo extends ethereum.Event {
  get params(): ItemSoldTo__Params {
    return new ItemSoldTo__Params(this);
  }
}

export class ItemSoldTo__Params {
  _event: ItemSoldTo;

  constructor(event: ItemSoldTo) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemName(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ItemToSeller extends ethereum.Event {
  get params(): ItemToSeller__Params {
    return new ItemToSeller__Params(this);
  }
}

export class ItemToSeller__Params {
  _event: ItemToSeller;

  constructor(event: ItemToSeller) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemName(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Marketplace__getItemResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get itemName(): string {
    return this[1].toString();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get buyer(): Address {
    return this[4].toAddress();
  }

  get listed(): boolean {
    return this[5].toBoolean();
  }
}

export class Marketplace__s_itemResult {
  value0: BigInt;
  value1: string;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: string,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getItemName(): string {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getBuyer(): Address {
    return this.value4;
  }

  getListed(): boolean {
    return this.value5;
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  getItem(): Array<Marketplace__getItemResultValue0Struct> {
    let result = super.call(
      "getItem",
      "getItem():((uint256,string,uint256,address,address,bool)[])",
      []
    );

    return result[0].toTupleArray<Marketplace__getItemResultValue0Struct>();
  }

  try_getItem(): ethereum.CallResult<
    Array<Marketplace__getItemResultValue0Struct>
  > {
    let result = super.tryCall(
      "getItem",
      "getItem():((uint256,string,uint256,address,address,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__getItemResultValue0Struct>()
    );
  }

  getItemPrice(): BigInt {
    let result = super.call("getItemPrice", "getItemPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getItemPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getItemPrice", "getItemPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProductitemId(): BigInt {
    let result = super.call(
      "getProductitemId",
      "getProductitemId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProductitemId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProductitemId",
      "getProductitemId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_item(param0: BigInt): Marketplace__s_itemResult {
    let result = super.call(
      "s_item",
      "s_item(uint256):(uint256,string,uint256,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Marketplace__s_itemResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBoolean()
    );
  }

  try_s_item(param0: BigInt): ethereum.CallResult<Marketplace__s_itemResult> {
    let result = super.tryCall(
      "s_item",
      "s_item(uint256):(uint256,string,uint256,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__s_itemResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyerCall extends ethereum.Call {
  get inputs(): BuyerCall__Inputs {
    return new BuyerCall__Inputs(this);
  }

  get outputs(): BuyerCall__Outputs {
    return new BuyerCall__Outputs(this);
  }
}

export class BuyerCall__Inputs {
  _call: BuyerCall;

  constructor(call: BuyerCall) {
    this._call = call;
  }

  get _itemName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class BuyerCall__Outputs {
  _call: BuyerCall;

  constructor(call: BuyerCall) {
    this._call = call;
  }
}

export class ListItemsCall extends ethereum.Call {
  get inputs(): ListItemsCall__Inputs {
    return new ListItemsCall__Inputs(this);
  }

  get outputs(): ListItemsCall__Outputs {
    return new ListItemsCall__Outputs(this);
  }
}

export class ListItemsCall__Inputs {
  _call: ListItemsCall;

  constructor(call: ListItemsCall) {
    this._call = call;
  }

  get _itemName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ListItemsCall__Outputs {
  _call: ListItemsCall;

  constructor(call: ListItemsCall) {
    this._call = call;
  }
}

export class SellerCall extends ethereum.Call {
  get inputs(): SellerCall__Inputs {
    return new SellerCall__Inputs(this);
  }

  get outputs(): SellerCall__Outputs {
    return new SellerCall__Outputs(this);
  }
}

export class SellerCall__Inputs {
  _call: SellerCall;

  constructor(call: SellerCall) {
    this._call = call;
  }

  get _itemName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SellerCall__Outputs {
  _call: SellerCall;

  constructor(call: SellerCall) {
    this._call = call;
  }
}
